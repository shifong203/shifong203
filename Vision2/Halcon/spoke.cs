//
// File generated by HDevelop for HALCON/.NET (C#) Version 17.12
//

using HalconDotNet;

public partial class HDevelopExport
{
    // Short Description: 拟合圆弧
    public void spoke(HObject ho_Image, out HObject ho_Regions, HTuple hv_Elements,
        HTuple hv_DetectHeight, HTuple hv_DetectWidth, HTuple hv_Sigma, HTuple hv_Threshold,
        HTuple hv_Transition, HTuple hv_Select, HTuple hv_ROIRows, HTuple hv_ROICols,
        HTuple hv_Direct, out HTuple hv_ResultRow, out HTuple hv_ResultColumn, out HTuple hv_ArcType)
    {
        // Stack for temporary objects
        HObject[] OTemp = new HObject[20];

        // Local iconic variables

        HObject ho_Contour, ho_ContCircle, ho_Rectangle1 = null;
        HObject ho_Arrow1 = null;

        // Local control variables

        HTuple hv_Width = null, hv_Height = null, hv_RowC = null;
        HTuple hv_ColumnC = null, hv_Radius = null, hv_StartPhi = null;
        HTuple hv_EndPhi = null, hv_PointOrder = null, hv_RowXLD = null;
        HTuple hv_ColXLD = null, hv_Length = null, hv_Length2 = null;
        HTuple hv_i = null, hv_j = new HTuple(), hv_RowE = new HTuple();
        HTuple hv_ColE = new HTuple(), hv_ATan = new HTuple();
        HTuple hv_RowL2 = new HTuple(), hv_RowL1 = new HTuple();
        HTuple hv_ColL2 = new HTuple(), hv_ColL1 = new HTuple();
        HTuple hv_MsrHandle_Measure = new HTuple(), hv_RowEdge = new HTuple();
        HTuple hv_ColEdge = new HTuple(), hv_Amplitude = new HTuple();
        HTuple hv_Distance = new HTuple(), hv_tRow = new HTuple();
        HTuple hv_tCol = new HTuple(), hv_t = new HTuple(), hv_Number = new HTuple();
        HTuple hv_k = new HTuple();
        HTuple hv_Select_COPY_INP_TMP = hv_Select.Clone();
        HTuple hv_Transition_COPY_INP_TMP = hv_Transition.Clone();

        // Initialize local and output iconic variables
        HOperatorSet.GenEmptyObj(out ho_Regions);
        HOperatorSet.GenEmptyObj(out ho_Contour);
        HOperatorSet.GenEmptyObj(out ho_ContCircle);
        HOperatorSet.GenEmptyObj(out ho_Rectangle1);
        HOperatorSet.GenEmptyObj(out ho_Arrow1);
        hv_ArcType = new HTuple();
        HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);

        ho_Regions.Dispose();
        HOperatorSet.GenEmptyObj(out ho_Regions);
        hv_ResultRow = new HTuple();
        hv_ResultColumn = new HTuple();

        ho_Contour.Dispose();
        HOperatorSet.GenContourPolygonXld(out ho_Contour, hv_ROIRows, hv_ROICols);

        HOperatorSet.FitCircleContourXld(ho_Contour, "algebraic", -1, 0, 0, 3, 2, out hv_RowC,
            out hv_ColumnC, out hv_Radius, out hv_StartPhi, out hv_EndPhi, out hv_PointOrder);
        ho_ContCircle.Dispose();
        HOperatorSet.GenCircleContourXld(out ho_ContCircle, hv_RowC, hv_ColumnC, hv_Radius,
            hv_StartPhi, hv_EndPhi, hv_PointOrder, 3);
        HOperatorSet.GetContourXld(ho_ContCircle, out hv_RowXLD, out hv_ColXLD);

        HOperatorSet.LengthXld(ho_ContCircle, out hv_Length);
        HOperatorSet.TupleLength(hv_ColXLD, out hv_Length2);
        if ((int)(new HTuple(hv_Elements.TupleLess(1))) != 0)
        {
            ho_Contour.Dispose();
            ho_ContCircle.Dispose();
            ho_Rectangle1.Dispose();
            ho_Arrow1.Dispose();

            return;
        }
        HTuple end_val19 = hv_Elements - 1;
        HTuple step_val19 = 1;
        for (hv_i = 0; hv_i.Continue(end_val19, step_val19); hv_i = hv_i.TupleAdd(step_val19))
        {
            if ((int)(new HTuple(((hv_RowXLD.TupleSelect(0))).TupleEqual(hv_RowXLD.TupleSelect(
                hv_Length2 - 1)))) != 0)
            {
                HOperatorSet.TupleInt(((1.0 * hv_Length2) / (hv_Elements - 1)) * hv_i, out hv_j);
                hv_ArcType = "circle";
            }
            else
            {
                HOperatorSet.TupleInt(((1.0 * hv_Length2) / (hv_Elements - 1)) * hv_i, out hv_j);
                hv_ArcType = "arc";
            }
            if ((int)(new HTuple(hv_j.TupleGreaterEqual(hv_Length2))) != 0)
            {
                hv_j = hv_Length2 - 1;
                //continue
            }
            hv_RowE = hv_RowXLD.TupleSelect(hv_j);
            hv_ColE = hv_ColXLD.TupleSelect(hv_j);

            //超出图像区域，不检测，否则容易报异常
            if ((int)((new HTuple((new HTuple((new HTuple(hv_RowE.TupleGreater(hv_Height - 1))).TupleOr(
                new HTuple(hv_RowE.TupleLess(0))))).TupleOr(new HTuple(hv_ColE.TupleGreater(
                hv_Width - 1))))).TupleOr(new HTuple(hv_ColE.TupleLess(0)))) != 0)
            {
                continue;
            }
            if ((int)(new HTuple(hv_Direct.TupleEqual("inner"))) != 0)
            {
                HOperatorSet.TupleAtan2((-hv_RowE) + hv_RowC, hv_ColE - hv_ColumnC, out hv_ATan);
                hv_ATan = ((new HTuple(180)).TupleRad()) + hv_ATan;
            }
            else
            {
                HOperatorSet.TupleAtan2((-hv_RowE) + hv_RowC, hv_ColE - hv_ColumnC, out hv_ATan);
            }

            ho_Rectangle1.Dispose();
            HOperatorSet.GenRectangle2(out ho_Rectangle1, hv_RowE, hv_ColE, hv_ATan, hv_DetectHeight / 2,
                hv_DetectWidth / 2);
            {
                HObject ExpTmpOutVar_0;
                HOperatorSet.ConcatObj(ho_Regions, ho_Rectangle1, out ExpTmpOutVar_0);
                ho_Regions.Dispose();
                ho_Regions = ExpTmpOutVar_0;
            }
            if ((int)(new HTuple(hv_i.TupleEqual(0))) != 0)
            {
                hv_RowL2 = hv_RowE + ((hv_DetectHeight / 2) * (((-hv_ATan)).TupleSin()));
                hv_RowL1 = hv_RowE - ((hv_DetectHeight / 2) * (((-hv_ATan)).TupleSin()));
                hv_ColL2 = hv_ColE + ((hv_DetectHeight / 2) * (((-hv_ATan)).TupleCos()));
                hv_ColL1 = hv_ColE - ((hv_DetectHeight / 2) * (((-hv_ATan)).TupleCos()));
                ho_Arrow1.Dispose();
                gen_arrow_contour_xld(out ho_Arrow1, hv_RowL1, hv_ColL1, hv_RowL2, hv_ColL2,
                    25, 25);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.ConcatObj(ho_Regions, ho_Arrow1, out ExpTmpOutVar_0);
                    ho_Regions.Dispose();
                    ho_Regions = ExpTmpOutVar_0;
                }
            }

            HOperatorSet.GenMeasureRectangle2(hv_RowE, hv_ColE, hv_ATan, hv_DetectHeight / 2,
                hv_DetectWidth / 2, hv_Width, hv_Height, "nearest_neighbor", out hv_MsrHandle_Measure);

            if ((int)(new HTuple(hv_Transition_COPY_INP_TMP.TupleEqual("negative"))) != 0)
            {
                hv_Transition_COPY_INP_TMP = "negative";
            }
            else
            {
                if ((int)(new HTuple(hv_Transition_COPY_INP_TMP.TupleEqual("positive"))) != 0)
                {
                    hv_Transition_COPY_INP_TMP = "positive";
                }
                else
                {
                    hv_Transition_COPY_INP_TMP = "all";
                }
            }

            if ((int)(new HTuple(hv_Select_COPY_INP_TMP.TupleEqual("first"))) != 0)
            {
                hv_Select_COPY_INP_TMP = "first";
            }
            else
            {
                if ((int)(new HTuple(hv_Select_COPY_INP_TMP.TupleEqual("last"))) != 0)
                {
                    hv_Select_COPY_INP_TMP = "last";
                }
                else
                {
                    hv_Select_COPY_INP_TMP = "all";
                }
            }

            HOperatorSet.MeasurePos(ho_Image, hv_MsrHandle_Measure, hv_Sigma, hv_Threshold,
                hv_Transition_COPY_INP_TMP, hv_Select_COPY_INP_TMP, out hv_RowEdge, out hv_ColEdge,
                out hv_Amplitude, out hv_Distance);
            HOperatorSet.CloseMeasure(hv_MsrHandle_Measure);
            hv_tRow = 0;
            hv_tCol = 0;
            hv_t = 0;
            HOperatorSet.TupleLength(hv_RowEdge, out hv_Number);
            if ((int)(new HTuple(hv_Number.TupleLess(1))) != 0)
            {
                continue;
            }
            HTuple end_val93 = hv_Number - 1;
            HTuple step_val93 = 1;
            for (hv_k = 0; hv_k.Continue(end_val93, step_val93); hv_k = hv_k.TupleAdd(step_val93))
            {
                if ((int)(new HTuple(((((hv_Amplitude.TupleSelect(hv_k))).TupleAbs())).TupleGreater(
                    hv_t))) != 0)
                {
                    hv_tRow = hv_RowEdge.TupleSelect(hv_k);
                    hv_tCol = hv_ColEdge.TupleSelect(hv_k);
                    hv_t = ((hv_Amplitude.TupleSelect(hv_k))).TupleAbs();
                }
            }
            if ((int)(new HTuple(hv_t.TupleGreater(0))) != 0)
            {
                hv_ResultRow = hv_ResultRow.TupleConcat(hv_tRow);
                hv_ResultColumn = hv_ResultColumn.TupleConcat(hv_tCol);
            }
        }

        ho_Contour.Dispose();
        ho_ContCircle.Dispose();
        ho_Rectangle1.Dispose();
        ho_Arrow1.Dispose();

        return;
    }
}