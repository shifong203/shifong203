//
// File generated by HDevelop for HALCON/.NET (C#) Version 17.12
//

using HalconDotNet;

public partial class HDevelopExport
{
    // Short Description: 画直线
    public void draw_rake(out HObject ho_Regions, HTuple hv_WindowHandle, HTuple hv_Elements,
        HTuple hv_DetectHeight, HTuple hv_DetectWidth, out HTuple hv_Row1, out HTuple hv_Column1,
        out HTuple hv_Row2, out HTuple hv_Column2)
    {
        // Stack for temporary objects
        HObject[] OTemp = new HObject[20];

        // Local iconic variables

        HObject ho_RegionLines, ho_Rectangle = null;
        HObject ho_Arrow1 = null;

        // Local control variables

        HTuple hv_ATan = null, hv_Deg = null, hv_i = null;
        HTuple hv_RowC = new HTuple(), hv_ColC = new HTuple();
        HTuple hv_Distance = new HTuple(), hv_RowL2 = new HTuple();
        HTuple hv_RowL1 = new HTuple(), hv_ColL2 = new HTuple();
        HTuple hv_ColL1 = new HTuple();
        // Initialize local and output iconic variables
        HOperatorSet.GenEmptyObj(out ho_Regions);
        HOperatorSet.GenEmptyObj(out ho_RegionLines);
        HOperatorSet.GenEmptyObj(out ho_Rectangle);
        HOperatorSet.GenEmptyObj(out ho_Arrow1);
        disp_message(hv_WindowHandle, new HTuple("点击鼠标左键画一条直线,点击右键确认"),
            "window", 12, 12, "red", "false");
        ho_Regions.Dispose();
        HOperatorSet.GenEmptyObj(out ho_Regions);
        HOperatorSet.DrawLine(hv_WindowHandle, out hv_Row1, out hv_Column1, out hv_Row2,
            out hv_Column2);
        //disp_line (WindowHandle, Row1, Column1, Row2, Column2)
        ho_RegionLines.Dispose();
        HOperatorSet.GenRegionLine(out ho_RegionLines, hv_Row1, hv_Column1, hv_Row2,
            hv_Column2);
        {
            HObject ExpTmpOutVar_0;
            HOperatorSet.ConcatObj(ho_Regions, ho_RegionLines, out ExpTmpOutVar_0);
            ho_Regions.Dispose();
            ho_Regions = ExpTmpOutVar_0;
        }
        HOperatorSet.TupleAtan2((-hv_Row2) + hv_Row1, hv_Column2 - hv_Column1, out hv_ATan);
        HOperatorSet.TupleDeg(hv_ATan, out hv_Deg);

        hv_ATan = hv_ATan + ((new HTuple(90)).TupleRad());

        //tuple_deg (ATan, Deg)

        HTuple end_val14 = hv_Elements;
        HTuple step_val14 = 1;
        for (hv_i = 1; hv_i.Continue(end_val14, step_val14); hv_i = hv_i.TupleAdd(step_val14))
        {
            hv_RowC = hv_Row1 + (((hv_Row2 - hv_Row1) * hv_i) / (hv_Elements + 1));
            hv_ColC = hv_Column1 + (((hv_Column2 - hv_Column1) * hv_i) / (hv_Elements + 1));

            if ((int)(new HTuple(hv_Elements.TupleEqual(1))) != 0)
            {
                HOperatorSet.DistancePp(hv_Row1, hv_Column1, hv_Row2, hv_Column2, out hv_Distance);
                ho_Rectangle.Dispose();
                HOperatorSet.GenRectangle2ContourXld(out ho_Rectangle, hv_RowC, hv_ColC,
                    hv_Deg.TupleRad(), hv_DetectHeight / 2, hv_Distance / 2);
            }
            else
            {
                hv_RowC = hv_Row1 + (((hv_Row2 - hv_Row1) * (hv_i - 1)) / (hv_Elements - 1));
                hv_ColC = hv_Column1 + (((hv_Column2 - hv_Column1) * (hv_i - 1)) / (hv_Elements - 1));
                ho_Rectangle.Dispose();
                HOperatorSet.GenRectangle2ContourXld(out ho_Rectangle, hv_RowC, hv_ColC,
                    hv_ATan, hv_DetectHeight / 2, hv_DetectWidth / 2);
            }

            {
                HObject ExpTmpOutVar_0;
                HOperatorSet.ConcatObj(ho_Regions, ho_Rectangle, out ExpTmpOutVar_0);
                ho_Regions.Dispose();
                ho_Regions = ExpTmpOutVar_0;
            }
            if ((int)(new HTuple(hv_i.TupleEqual(1))) != 0)
            {
                hv_RowL2 = hv_RowC + ((hv_DetectHeight / 2) * (((-hv_ATan)).TupleSin()));
                hv_RowL1 = hv_RowC - ((hv_DetectHeight / 2) * (((-hv_ATan)).TupleSin()));
                hv_ColL2 = hv_ColC + ((hv_DetectHeight / 2) * (((-hv_ATan)).TupleCos()));
                hv_ColL1 = hv_ColC - ((hv_DetectHeight / 2) * (((-hv_ATan)).TupleCos()));
                ho_Arrow1.Dispose();
                gen_arrow_contour_xld(out ho_Arrow1, hv_RowL1, hv_ColL1, hv_RowL2, hv_ColL2,
                    25, 25);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.ConcatObj(ho_Regions, ho_Arrow1, out ExpTmpOutVar_0);
                    ho_Regions.Dispose();
                    ho_Regions = ExpTmpOutVar_0;
                }
            }
        }

        ho_RegionLines.Dispose();
        ho_Rectangle.Dispose();
        ho_Arrow1.Dispose();

        return;
    }
}