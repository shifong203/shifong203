//
// File generated by HDevelop for HALCON/.NET (C#) Version 17.12
//
using HalconDotNet;
using NokidaE.vision;

public partial class HDevelopExport
{
    public static ModelVision vision = new ModelVision();
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)

    public HDevelopExport(System.IntPtr hwindowID, ref int number)
    {
        // Default settings used in HDevelop
        HOperatorSet.SetSystem("width", 512);
        HOperatorSet.SetSystem("height", 512);
        if (HalconAPI.isWindows)
            HOperatorSet.SetSystem("use_window_thread", "true");
        action(hwindowID, ref number);
    }

#endif

    // Procedures
    // Local procedures
    // Short Description: 拟合波浪
    public void waves(HObject ho_image, out HObject ho_XLD, HTuple hv_Elements, HTuple hv_process,
        HTuple hv_SOWM, HTuple hv_Length2, HTuple hv_StartRow, HTuple hv_StartCol, HTuple hv_EndRow,
        HTuple hv_EndCol, HTuple hv_EdgeWidth, out HTuple hv_PeaksRow, out HTuple hv_PeaksCol,
        out HTuple hv_pitsRow, out HTuple hv_pitsCol, out HTuple hv_pointsRow, out HTuple hv_pointsCol)
    {
        // Stack for temporary objects
        HObject[] OTemp = new HObject[20];

        // Local iconic variables

        HObject ho_Arrow1, ho_Cross = null, ho_Cross2;
        HObject ho_Line = null, ho_Cross1 = null, ho_Rectangle2, ho_Rectangle1 = null;
        HObject ho_Regions = null, ho_Cross4 = null, ho_Line1 = null;
        HObject ho_Regions1 = null, ho_Circle = null, ho_Rectangle = null;
        HObject ho_Cross3 = null, ho_ContOut, ho_Cross5;

        // Local control variables

        HTuple hv_RowCenter = null, hv_ColCenter = null;
        HTuple hv_Length1 = null, hv_Phi = null, hv_length = null;
        HTuple hv_HomMat2D = null, hv_RowTrans = null, hv_ColTrans = null;
        HTuple hv_Col1 = new HTuple(), hv_Row2 = new HTuple();
        HTuple hv_Col2 = new HTuple(), hv_ATan = null, hv_RowC = null;
        HTuple hv_ColC = null, hv_RowC3 = null, hv_ColC3 = null;
        HTuple hv_EdgeRows1 = null, hv_EdgeColumns1 = null, hv_RowL2 = null;
        HTuple hv_RowL1 = null, hv_ColL2 = null, hv_ColL1 = null;
        HTuple hv_peaksRow = null, hv_peaksCol = null, hv_Index = null;
        HTuple hv_EdgeRows = new HTuple(), hv_EdgeColumns = new HTuple();
        HTuple hv_ResultRow2 = new HTuple(), hv_ResultColumn2 = new HTuple();
        HTuple hv_ResultRow4 = new HTuple(), hv_ResultColumn4 = new HTuple();
        HTuple hv_strint = new HTuple(), hv_endint = new HTuple();
        HTuple hv_Row12 = new HTuple(), hv_Col11 = new HTuple();
        HTuple hv_Row22 = new HTuple(), hv_Col21 = new HTuple();
        HTuple hv_ResultRow1 = new HTuple(), hv_ResultColumn1 = new HTuple();
        HTuple hv_ResultRow3 = new HTuple(), hv_ResultColumn3 = new HTuple();
        HTuple hv_ArcType = new HTuple(), hv_RowCenter1 = new HTuple();
        HTuple hv_ColCenter1 = new HTuple(), hv_Radius = new HTuple();
        HTuple hv_ResultRow = new HTuple(), hv_ResultColumn = new HTuple();
        HTuple hv_Row11 = new HTuple(), hv_PointsRow = null, hv_PointsCol = null;
        HTuple hv_Weights = null;
        // Initialize local and output iconic variables
        HOperatorSet.GenEmptyObj(out ho_XLD);
        HOperatorSet.GenEmptyObj(out ho_Arrow1);
        HOperatorSet.GenEmptyObj(out ho_Cross);
        HOperatorSet.GenEmptyObj(out ho_Cross2);
        HOperatorSet.GenEmptyObj(out ho_Line);
        HOperatorSet.GenEmptyObj(out ho_Cross1);
        HOperatorSet.GenEmptyObj(out ho_Rectangle2);
        HOperatorSet.GenEmptyObj(out ho_Rectangle1);
        HOperatorSet.GenEmptyObj(out ho_Regions);
        HOperatorSet.GenEmptyObj(out ho_Cross4);
        HOperatorSet.GenEmptyObj(out ho_Line1);
        HOperatorSet.GenEmptyObj(out ho_Regions1);
        HOperatorSet.GenEmptyObj(out ho_Circle);
        HOperatorSet.GenEmptyObj(out ho_Rectangle);
        HOperatorSet.GenEmptyObj(out ho_Cross3);
        HOperatorSet.GenEmptyObj(out ho_ContOut);
        HOperatorSet.GenEmptyObj(out ho_Cross5);
        hv_PeaksRow = new HTuple();
        hv_PeaksCol = new HTuple();

        HOperatorSet.LinePosition(hv_StartRow, hv_StartCol, hv_EndRow, hv_EndCol, out hv_RowCenter,
            out hv_ColCenter, out hv_Length1, out hv_Phi);

        ho_Arrow1.Dispose();
        gen_arrow_contour_xld(out ho_Arrow1, hv_StartRow, hv_StartCol, hv_EndRow, hv_EndCol,
            25, 25);

        hv_length = (hv_Length1 / hv_Elements) / 4;
        //gen_cross_contour_xld (Cross, Row3, StartCol, 6, Phi)
        //vector_angle_to_rigid (0, 0, 0, Row3, StartCol, Phi+rad(180), HomMat2D)
        //affine_trans_pixel (HomMat2D, 0, Length1, RowTrans2, ColTrans2)
        //gen_cross_contour_xld (Cross2, RowTrans2, ColTrans2, 16, Phi)
        //pts_to_best_line (Line, [RowTrans,RowTrans2], [ColTrans,ColTrans2], 2, StartRow, Col1, Row2, Col2)
        //计算直线与x轴的夹角，逆时针方向为正向。
        HOperatorSet.AngleLx(hv_StartRow, hv_StartCol, hv_EndRow, hv_EndCol, out hv_ATan);
        HOperatorSet.VectorAngleToRigid(0, 0, 0, hv_EndRow, hv_StartCol, hv_ATan + ((new HTuple(180)).TupleRad()
            ), out hv_HomMat2D);
        HOperatorSet.AffineTransPixel(hv_HomMat2D, 0, -(hv_length * 2.5), out hv_RowTrans,
            out hv_ColTrans);
        //gen_cross_contour_xld (Cross1, RowTrans, ColTrans, 16, Phi)

        //边缘检测方向垂直于检测直线：直线方向正向旋转90°为边缘检测方向
        hv_ATan = hv_ATan + ((new HTuple(90)).TupleRad());
        //*定义第一个点
        hv_RowC = 1.0 * (hv_StartRow + (((hv_EndRow - hv_StartRow) * 0) / (hv_Elements - 1)));
        hv_ColC = 1.0 * (hv_StartCol + (((hv_EndCol - hv_StartCol) * 0) / (hv_Elements - 1)));
        hv_RowC3 = 1.0 * (hv_RowTrans + (((hv_EndRow - hv_RowTrans) * -1) / (hv_Elements - 1.5)));
        hv_ColC3 = 1.0 * (hv_ColTrans + (((hv_EndCol - hv_ColTrans) * -1) / (hv_Elements - 1.5)));
        ho_Rectangle2.Dispose();
        HOperatorSet.GenRectangle2(out ho_Rectangle2, hv_RowC3, hv_ColC3, hv_ATan, hv_Length2,
            hv_length);
        peak(ho_image, hv_RowC3, hv_ColC3, hv_ATan + ((new HTuple(180)).TupleRad()), hv_Length2,
            hv_length, 5, 1.2, 20, "positive", "first", out hv_EdgeRows1, out hv_EdgeColumns1,
            out hv_pitsRow, out hv_pitsCol);
        ho_Cross2.Dispose();
        HOperatorSet.GenCrossContourXld(out ho_Cross2, hv_pitsRow, hv_pitsCol, 6, 0);

        //在第一个测量矩形绘制一个箭头xld，用于只是边缘检测方向
        hv_RowL2 = hv_RowC + (hv_Length2 * (((-hv_ATan)).TupleSin()));
        hv_RowL1 = hv_RowC - (hv_Length2 * (((-hv_ATan)).TupleSin()));
        hv_ColL2 = hv_ColC + (hv_Length2 * (((-hv_ATan)).TupleCos()));
        hv_ColL1 = hv_ColC - (hv_Length2 * (((-hv_ATan)).TupleCos()));
        ho_Arrow1.Dispose();
        gen_arrow_contour_xld(out ho_Arrow1, hv_RowL1, hv_ColL1, hv_RowL2, hv_ColL2,
            25, 25);
        ho_XLD.Dispose();
        HOperatorSet.GenEmptyObj(out ho_XLD);
        hv_peaksRow = new HTuple();
        hv_peaksCol = new HTuple();
        hv_pointsRow = hv_pitsRow.Clone();
        hv_pointsCol = hv_pitsCol.Clone();

        HTuple end_val42 = hv_Elements - 1;
        HTuple step_val42 = 1;
        for (hv_Index = 0; hv_Index.Continue(end_val42, step_val42); hv_Index = hv_Index.TupleAdd(step_val42))
        {
            //**测量凸点
            //如果有多个测量矩形，产生该测量矩形xld
            hv_RowC = 1.0 * (hv_StartRow + (((hv_EndRow - hv_StartRow) * hv_Index) / (hv_Elements - 1)));
            hv_ColC = 1.0 * (hv_StartCol + (((hv_EndCol - hv_StartCol) * hv_Index) / (hv_Elements - 1)));
            ho_Rectangle1.Dispose();
            HOperatorSet.GenRectangle2(out ho_Rectangle1, hv_RowC, hv_ColC, hv_ATan, hv_Length2,
                hv_length / 1.5);
            peak(ho_image, hv_RowC, hv_ColC, hv_ATan, hv_Length2, hv_length / 1.5, 5, 2.1,
                48, "negative", "first", out hv_EdgeRows, out hv_EdgeColumns, out hv_ResultRow2,
                out hv_ResultColumn2);
            hv_peaksRow = hv_peaksRow.TupleConcat(hv_ResultRow2);
            hv_peaksCol = hv_peaksCol.TupleConcat(hv_ResultColumn2);
            hv_pointsRow = hv_pointsRow.TupleConcat(hv_ResultRow2);
            hv_pointsCol = hv_pointsCol.TupleConcat(hv_ResultColumn2);
            ho_Cross1.Dispose();
            HOperatorSet.GenCrossContourXld(out ho_Cross1, hv_EdgeRows, hv_EdgeColumns,
                6, 0);
            ho_Cross1.Dispose();
            HOperatorSet.GenCrossContourXld(out ho_Cross1, hv_peaksRow, hv_peaksCol, 6,
                0);
            //**测量左边直线
            ho_Regions.Dispose();
            rake(ho_image, out ho_Regions, 30, hv_EdgeWidth, 18, 1, 20, "negative", "first",
                hv_pitsRow.TupleSelect(hv_Index), hv_pitsCol.TupleSelect(hv_Index), hv_peaksRow.TupleSelect(
                hv_Index), hv_peaksCol.TupleSelect(hv_Index), out hv_ResultRow4, out hv_ResultColumn4);
            //gen_cross_contour_xld (Cross4, ResultRow4, ResultColumn4, 6, 0)
            hv_strint = 2;
            hv_endint = (new HTuple(hv_ResultRow4.TupleLength())) - 4;
            if ((int)(new HTuple(hv_Index.TupleEqual(0))) != 0)
            {
                ho_Line1.Dispose();
                HOperatorSet.GenContourPolygonXld(out ho_Line1, hv_ResultRow4.TupleSelectRange(
                    hv_strint, hv_endint), hv_ResultColumn4.TupleSelectRange(hv_strint, hv_endint));
                hv_Row12 = hv_ResultRow4.TupleSelect(hv_strint);
                hv_Col11 = hv_ResultColumn4.TupleSelect(hv_strint);
                hv_Row22 = hv_ResultRow4.TupleSelect(hv_endint);
                hv_Col21 = hv_ResultColumn4.TupleSelect(hv_endint);
            }
            else
            {
                ho_Line1.Dispose();
                pts_to_best_line(out ho_Line1, hv_ResultRow4.TupleSelectRange(hv_strint, hv_endint),
                    hv_ResultColumn4.TupleSelectRange(hv_strint, hv_endint), 5, out hv_Row12,
                    out hv_Col11, out hv_Row22, out hv_Col21);
                hv_pointsRow = ((hv_pointsRow.TupleConcat(hv_Row12))).TupleConcat(hv_Row22);
                hv_pointsCol = ((hv_pointsCol.TupleConcat(hv_Col11))).TupleConcat(hv_Col21);
            }
            {
                HObject ExpTmpOutVar_0;
                HOperatorSet.ConcatObj(ho_XLD, ho_Line1, out ExpTmpOutVar_0);
                ho_XLD.Dispose();
                ho_XLD = ExpTmpOutVar_0;
            }
            //**测量凹点
            hv_RowC3 = 1.0 * (hv_RowTrans + (((hv_EndRow - hv_RowTrans) * hv_Index) / (hv_Elements - 1.5)));
            hv_ColC3 = 1.0 * (hv_ColTrans + (((hv_EndCol - hv_ColTrans) * hv_Index) / (hv_Elements - 1.5)));
            ho_Rectangle2.Dispose();
            HOperatorSet.GenRectangle2(out ho_Rectangle2, hv_RowC3, hv_ColC3, hv_ATan,
                hv_Length2, hv_length);
            peak(ho_image, hv_RowC3, hv_ColC3, hv_ATan + ((new HTuple(180)).TupleRad()),
                hv_Length2, hv_length, 6, 1.2, 20, "positive", "first", out hv_EdgeRows1,
                out hv_EdgeColumns1, out hv_ResultRow1, out hv_ResultColumn1);
            //gen_cross_contour_xld (Cross2, EdgeRows1, EdgeColumns1, 6, 0)
            {
                HObject ExpTmpOutVar_0;
                HOperatorSet.ConcatObj(ho_XLD, ho_Cross2, out ExpTmpOutVar_0);
                ho_XLD.Dispose();
                ho_XLD = ExpTmpOutVar_0;
            }
            hv_pitsRow = hv_pitsRow.TupleConcat(hv_ResultRow1);
            hv_pitsCol = hv_pitsCol.TupleConcat(hv_ResultColumn1);
            hv_pointsRow = hv_pointsRow.TupleConcat(hv_ResultRow1);
            hv_pointsCol = hv_pointsCol.TupleConcat(hv_ResultColumn1);
            if ((int)(new HTuple(hv_Index.TupleGreater(0))) != 0)
            {
                //******测量凹弧
                ho_Cross.Dispose();
                HOperatorSet.GenCrossContourXld(out ho_Cross, ((hv_Row12.TupleConcat(hv_pitsRow.TupleSelect(
                    hv_Index)))).TupleConcat(hv_Row2), ((hv_Col11.TupleConcat(hv_pitsCol.TupleSelect(
                    hv_Index)))).TupleConcat(hv_Col2), 6, 0);
                ho_Regions1.Dispose();
                spoke(ho_image, out ho_Regions1, 10, hv_EdgeWidth, 5, 1.8, 28, " negative",
                    "last", ((hv_Row12.TupleConcat(hv_pitsRow.TupleSelect(hv_Index)))).TupleConcat(
                    hv_Row2), ((hv_Col11.TupleConcat(hv_pitsCol.TupleSelect(hv_Index)))).TupleConcat(
                    hv_Col2), "inner", out hv_ResultRow3, out hv_ResultColumn3, out hv_ArcType);
                //gen_cross_contour_xld (Cross2, ResultRow3, ResultColumn3, 26, 0)
                ho_Circle.Dispose();
                pts_to_best_circle(out ho_Circle, ((hv_Row12.TupleConcat(hv_pitsRow.TupleSelect(
                    hv_Index)))).TupleConcat(hv_Row2), ((hv_Col11.TupleConcat(hv_pitsCol.TupleSelect(
                    hv_Index)))).TupleConcat(hv_Col2), 3, hv_ArcType, out hv_RowCenter1,
                    out hv_ColCenter1, out hv_Radius);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.ConcatObj(ho_XLD, ho_Circle, out ExpTmpOutVar_0);
                    ho_XLD.Dispose();
                    ho_XLD = ExpTmpOutVar_0;
                }
            }
            //**测量右直线
            ho_Rectangle.Dispose();
            rake(ho_image, out ho_Rectangle, 30, hv_EdgeWidth, 3, 1.8, 20, "negative",
                "first", hv_ResultRow2, hv_ResultColumn2, hv_ResultRow1, hv_ResultColumn1,
                out hv_ResultRow, out hv_ResultColumn);
            //gen_cross_contour_xld (Cross, ResultRow, ResultColumn, 6, 0)
            hv_strint = 4;
            hv_endint = (new HTuple(hv_ResultColumn.TupleLength())) - 4;
            //gen_cross_contour_xld (Cross, ResultRow[strint:endint], ResultColumn[strint:endint], 6, 0)
            if ((int)(new HTuple(hv_Index.TupleEqual(hv_Elements - 1))) != 0)
            {
                ho_Line.Dispose();
                HOperatorSet.GenContourPolygonXld(out ho_Line, hv_ResultRow.TupleSelectRange(
                    2, hv_endint), hv_ResultColumn.TupleSelectRange(2, hv_endint));
                hv_Row11 = hv_ResultRow.TupleSelect(2);
                hv_Col1 = hv_ResultColumn.TupleSelect(2);
            }
            else
            {
                ho_Line.Dispose();
                pts_to_best_line(out ho_Line, hv_ResultRow.TupleSelectRange(hv_strint, hv_endint),
                    hv_ResultColumn.TupleSelectRange(hv_strint, hv_endint), 2, out hv_Row11,
                    out hv_Col1, out hv_Row2, out hv_Col2);
                hv_pointsRow = ((hv_pointsRow.TupleConcat(hv_Row11))).TupleConcat(hv_Row2);
                hv_pointsCol = ((hv_pointsCol.TupleConcat(hv_Col1))).TupleConcat(hv_Col2);
            }
            {
                HObject ExpTmpOutVar_0;
                HOperatorSet.ConcatObj(ho_XLD, ho_Line, out ExpTmpOutVar_0);
                ho_XLD.Dispose();
                ho_XLD = ExpTmpOutVar_0;
            }
            //*测量凸点弧
            ho_Cross.Dispose();
            HOperatorSet.GenCrossContourXld(out ho_Cross, ((hv_Row22.TupleConcat(hv_ResultRow2))).TupleConcat(
                hv_Row11), ((hv_Col21.TupleConcat(hv_ResultColumn2))).TupleConcat(hv_Col1),
                6, 0);
            ho_Circle.Dispose();
            pts_to_best_circle(out ho_Circle, ((hv_Row22.TupleConcat(hv_ResultRow2))).TupleConcat(
                hv_Row11), ((hv_Col21.TupleConcat(hv_ResultColumn2))).TupleConcat(hv_Col1),
                3, "arc", out hv_RowCenter1, out hv_ColCenter1, out hv_Radius);
            {
                HObject ExpTmpOutVar_0;
                HOperatorSet.ConcatObj(ho_XLD, ho_Circle, out ExpTmpOutVar_0);
                ho_XLD.Dispose();
                ho_XLD = ExpTmpOutVar_0;
            }
            ho_Cross3.Dispose();
            HOperatorSet.GenCrossContourXld(out ho_Cross3, hv_peaksRow, hv_peaksCol, 16,
                0);
            {
                HObject ExpTmpOutVar_0;
                HOperatorSet.ConcatObj(ho_XLD, ho_Cross3, out ExpTmpOutVar_0);
                ho_XLD.Dispose();
                ho_XLD = ExpTmpOutVar_0;
            }
        }
        if (HDevWindowStack.IsOpen())
        {
            HOperatorSet.DispObj(ho_XLD, HDevWindowStack.GetActive());
        }
        ho_Arrow1.Dispose();
        ho_Cross.Dispose();
        ho_Cross2.Dispose();
        ho_Line.Dispose();
        ho_Cross1.Dispose();
        ho_Rectangle2.Dispose();
        ho_Rectangle1.Dispose();
        ho_Regions.Dispose();
        ho_Cross4.Dispose();
        ho_Line1.Dispose();
        ho_Regions1.Dispose();
        ho_Circle.Dispose();
        ho_Rectangle.Dispose();
        ho_Cross3.Dispose();
        ho_ContOut.Dispose();
        ho_Cross5.Dispose();

        return;
        // stop(...); only in hdevelop

        //********************
        hv_PointsRow = new HTuple();
        hv_PointsCol = new HTuple();
        ho_XLD.Dispose();
        HOperatorSet.GenEmptyObj(out ho_XLD);
        ho_ContOut.Dispose();
        HOperatorSet.DrawNurbs(out ho_ContOut, 200000, "true", "true", "true", "true",
            3, out hv_PointsRow, out hv_PointsCol, out hv_Weights);

        ho_Cross5.Dispose();
        HOperatorSet.GenCrossContourXld(out ho_Cross5, hv_PointsRow, hv_PointsCol, 6,
            0);
        for (hv_Index = 0; (int)hv_Index <= (int)((new HTuple(hv_PointsCol.TupleLength())) - 1); hv_Index = (int)hv_Index + 6)
        {
            //**测量直线
            ho_Regions.Dispose();
            rake(ho_image, out ho_Regions, 30, 35, 18, 1, 20, "negative", "first", hv_PointsRow.TupleSelect(
                hv_Index), hv_PointsCol.TupleSelect(hv_Index), hv_PointsRow.TupleSelect(
                hv_Index + 1), hv_PointsCol.TupleSelect(hv_Index + 1), out hv_ResultRow4, out hv_ResultColumn4);
            ho_Cross4.Dispose();
            HOperatorSet.GenCrossContourXld(out ho_Cross4, hv_ResultRow4, hv_ResultColumn4,
                6, 0);
            ho_Line1.Dispose();
            pts_to_best_line(out ho_Line1, hv_ResultRow4, hv_ResultColumn4, 2, out hv_Row12,
                out hv_Col11, out hv_Row22, out hv_Col21);
            {
                HObject ExpTmpOutVar_0;
                HOperatorSet.ConcatObj(ho_XLD, ho_Line1, out ExpTmpOutVar_0);
                ho_XLD.Dispose();
                ho_XLD = ExpTmpOutVar_0;
            }
            //**测量凸弧
            ho_Cross.Dispose();
            HOperatorSet.GenCrossContourXld(out ho_Cross, hv_PointsRow.TupleSelectRange(
                hv_Index + 1, hv_Index + 3), hv_PointsCol.TupleSelectRange(hv_Index + 1, hv_Index + 3),
                6, 0);
            ho_Regions1.Dispose();
            spoke(ho_image, out ho_Regions1, 5, 20, 5, 1.8, 28, " negative", "last", hv_PointsRow.TupleSelectRange(
                hv_Index + 1, hv_Index + 3), hv_PointsCol.TupleSelectRange(hv_Index + 1, hv_Index + 3),
                "outer", out hv_ResultRow3, out hv_ResultColumn3, out hv_ArcType);
            ho_Cross2.Dispose();
            HOperatorSet.GenCrossContourXld(out ho_Cross2, hv_ResultRow3, hv_ResultColumn3,
                26, 0);

            ho_Circle.Dispose();
            pts_to_best_circle(out ho_Circle, hv_ResultRow3, hv_ResultColumn3, new HTuple(hv_ResultColumn3.TupleLength()
                ), "arc", out hv_RowCenter1, out hv_ColCenter1, out hv_Radius);
            {
                HObject ExpTmpOutVar_0;
                HOperatorSet.ConcatObj(ho_XLD, ho_Circle, out ExpTmpOutVar_0);
                ho_XLD.Dispose();
                ho_XLD = ExpTmpOutVar_0;
            }
            //**测量右直线
            ho_Rectangle.Dispose();
            rake(ho_image, out ho_Rectangle, 30, 35, 3, 1.8, 20, "negative", "first", hv_PointsRow.TupleSelect(
                hv_Index + 3), hv_PointsCol.TupleSelect(hv_Index + 3), hv_PointsRow.TupleSelect(
                hv_Index + 4), hv_PointsCol.TupleSelect(hv_Index + 4), out hv_ResultRow, out hv_ResultColumn);
            ho_Cross.Dispose();
            HOperatorSet.GenCrossContourXld(out ho_Cross, hv_ResultRow, hv_ResultColumn,
                6, 0);
            ho_Line.Dispose();
            pts_to_best_line(out ho_Line, hv_ResultRow, hv_ResultColumn, 2, out hv_Row11,
                out hv_Col1, out hv_Row2, out hv_Col2);
            {
                HObject ExpTmpOutVar_0;
                HOperatorSet.ConcatObj(ho_XLD, ho_Line, out ExpTmpOutVar_0);
                ho_XLD.Dispose();
                ho_XLD = ExpTmpOutVar_0;
            }
            //******测量凹弧
            ho_Cross.Dispose();
            HOperatorSet.GenCrossContourXld(out ho_Cross, hv_PointsRow.TupleSelectRange(
                hv_Index + 4, hv_Index + 6), hv_PointsCol.TupleSelectRange(hv_Index + 4, hv_Index + 6),
                6, 0);
            ho_Regions1.Dispose();
            spoke(ho_image, out ho_Regions1, 5, 20, 5, 1.8, 28, " negative", "last", hv_PointsRow.TupleSelectRange(
                hv_Index + 4, hv_Index + 6), hv_PointsCol.TupleSelectRange(hv_Index + 4, hv_Index + 6),
                "inner", out hv_ResultRow3, out hv_ResultColumn3, out hv_ArcType);
            ho_Cross2.Dispose();
            HOperatorSet.GenCrossContourXld(out ho_Cross2, hv_ResultRow3, hv_ResultColumn3,
                26, 0);
            ho_Circle.Dispose();
            pts_to_best_circle(out ho_Circle, hv_ResultRow3, hv_ResultColumn3, new HTuple(hv_ResultColumn3.TupleLength()
                ), hv_ArcType, out hv_RowCenter1, out hv_ColCenter1, out hv_Radius);
            {
                HObject ExpTmpOutVar_0;
                HOperatorSet.ConcatObj(ho_XLD, ho_Circle, out ExpTmpOutVar_0);
                ho_XLD.Dispose();
                ho_XLD = ExpTmpOutVar_0;
            }
        }

        if (HDevWindowStack.IsOpen())
        {
            HOperatorSet.DispObj(ho_image, HDevWindowStack.GetActive());
        }
        if (HDevWindowStack.IsOpen())
        {
            HOperatorSet.DispObj(ho_XLD, HDevWindowStack.GetActive());
        }

        // stop(...); only in hdevelop
    }

#if !NO_EXPORT_MAIN

    // Main procedure
    private void action(System.IntPtr hv_WindowHandle, ref int number)
    {
        HTuple hv_SearchImageFiles = null;
        // Local iconic variables
        HObject ho_Image, ho_ImageMedian, ho_Image1;
        HObject ho_Image2, ho_Rectangle2 = null, ho_ImageReduced = null;
        HObject ho_Cross6 = null, ho_ModelContours = null, ho_ContoursAffinTrans = null;
        HObject ho_Regions = null, ho_Line1 = null, ho_Regions3 = null;
        HObject ho_Cross8 = null, ho_Cross1 = null, ho_Line2 = null, ho_Cross2 = null;
        HObject ho_XLD = null, ho_Cross7 = null, ho_XLD1 = null, ho_Region1 = null;
        HObject ho_Region2 = null, ho_Rectangle3 = null, ho_ContoursAffinTrans1 = null;
        HObject ho_Cross9 = null, ho_Line1mh = null, ho_Line2mh = null;
        HObject ho_RegionAffineTrans = null, ho_Line1y = null, ho_Line2y = null;
        HObject ho_Line2P = null, ho_Line1J = null;
        // Local control variables
        HTuple hv_EdgeWidth = null, hv_Row3 = new HTuple();
        HTuple hv_Column1 = new HTuple(), hv_Phi = new HTuple();
        HTuple hv_Length1 = new HTuple(), hv_Length2 = new HTuple();
        HTuple hv_ModelID = new HTuple(), hv_RowHM = new HTuple();
        HTuple hv_ColumnHM = new HTuple(), hv_AngleHM = new HTuple();
        HTuple hv_Score1 = new HTuple(), hv_HomMat2D = new HTuple();
        HTuple hv_Row12 = new HTuple(), hv_Column13 = new HTuple();
        HTuple hv_Row23 = new HTuple(), hv_Column23 = new HTuple();
        HTuple hv_Row14 = new HTuple(), hv_Col11 = new HTuple();
        HTuple hv_Row24 = new HTuple(), hv_Col21 = new HTuple();
        HTuple hv_Row4 = new HTuple(), hv_Col = new HTuple(), hv_ResultRow4 = new HTuple();
        HTuple hv_ResultColumn4 = new HTuple(), hv_RowCenter1 = new HTuple();
        HTuple hv_ColCenter1 = new HTuple(), hv_Phi1 = new HTuple();
        HTuple hv_RowCenter2 = new HTuple(), hv_ColCenter2 = new HTuple();
        HTuple hv_Phi2 = new HTuple(), hv_StartRow = new HTuple();
        HTuple hv_StartCol = new HTuple(), hv_EndRow1 = new HTuple();
        HTuple hv_EndCol1 = new HTuple(), hv_Row16 = new HTuple();
        HTuple hv_Column14 = new HTuple(), hv_Row26 = new HTuple();
        HTuple hv_Column24 = new HTuple(), hv_PeaksRow = new HTuple();
        HTuple hv_PeaksCol = new HTuple(), hv_pitsRow = new HTuple();
        HTuple hv_pitsCol = new HTuple(), hv_pointsRow = new HTuple();
        HTuple hv_pointsCol = new HTuple(), hv_PeaksRow1 = new HTuple();
        HTuple hv_PeaksCol1 = new HTuple(), hv_pitsRow1 = new HTuple();
        HTuple hv_pitsCol1 = new HTuple(), hv_pointsRow1 = new HTuple();
        HTuple hv_pointsCol1 = new HTuple(), hv_Tuple1 = new HTuple();
        HTuple hv_Tuple2 = new HTuple(), hv_RowCenter = new HTuple();
        HTuple hv_ColCenter = new HTuple(), hv_Length = new HTuple();
        HTuple hv_Phi3 = new HTuple(), hv_maxArr1 = null, hv_maxArr2 = null;
        HTuple hv_minArr1 = null, hv_minArr2 = null, hv_meanArr1 = null;
        HTuple hv_meanArr2 = null, hv_HomMat2DIdentity = null;
        HTuple hv_Distance1 = new HTuple(), hv_Distance2 = new HTuple();
        HTuple hv_Column3 = new HTuple(), hv_Angle2 = new HTuple();
        HTuple hv_Score = new HTuple(), hv_HomMat2D2 = new HTuple();
        HTuple hv_HomMat2D1 = new HTuple(), hv_Row1110 = new HTuple();
        HTuple hv_Col1110 = new HTuple(), hv_Row211 = new HTuple();
        HTuple hv_Col211 = new HTuple(), hv_Row2 = new HTuple();
        HTuple hv_Col2 = new HTuple(), hv_HomMat2DTranslate = new HTuple();
        HTuple hv_HomMat2DRotate = new HTuple(), hv_Qx = new HTuple();
        HTuple hv_Qy = new HTuple(), hv_RowProj1 = new HTuple();
        HTuple hv_ColProj1 = new HTuple(), hv_Qx1S = new HTuple();
        HTuple hv_Qy1S = new HTuple(), hv_Qx1E = new HTuple();
        HTuple hv_Qy1E = new HTuple(), hv_PeaksRow2 = new HTuple();
        HTuple hv_PeaksCol2 = new HTuple(), hv_pitsRow2 = new HTuple();
        HTuple hv_pitsCol2 = new HTuple(), hv_Qx2S = new HTuple();
        HTuple hv_Qy2S = new HTuple(), hv_Qx2E = new HTuple();
        HTuple hv_Qy2E = new HTuple(), hv_PeaksRow3 = new HTuple();
        HTuple hv_PeaksCol3 = new HTuple(), hv_pitsRow3 = new HTuple();
        HTuple hv_pitsCol3 = new HTuple();
        // Initialize local and output iconic variables
        HOperatorSet.GenEmptyObj(out ho_Image);
        HOperatorSet.GenEmptyObj(out ho_ImageMedian);
        HOperatorSet.GenEmptyObj(out ho_Image1);
        HOperatorSet.GenEmptyObj(out ho_Image2);
        HOperatorSet.GenEmptyObj(out ho_Rectangle2);
        HOperatorSet.GenEmptyObj(out ho_ImageReduced);
        HOperatorSet.GenEmptyObj(out ho_Cross6);
        HOperatorSet.GenEmptyObj(out ho_ModelContours);
        HOperatorSet.GenEmptyObj(out ho_ContoursAffinTrans);
        HOperatorSet.GenEmptyObj(out ho_Regions);
        HOperatorSet.GenEmptyObj(out ho_Line1);
        HOperatorSet.GenEmptyObj(out ho_Regions3);
        HOperatorSet.GenEmptyObj(out ho_Cross8);
        HOperatorSet.GenEmptyObj(out ho_Cross1);
        HOperatorSet.GenEmptyObj(out ho_Line2);
        HOperatorSet.GenEmptyObj(out ho_Cross2);
        HOperatorSet.GenEmptyObj(out ho_XLD);
        HOperatorSet.GenEmptyObj(out ho_Cross7);
        HOperatorSet.GenEmptyObj(out ho_XLD1);
        HOperatorSet.GenEmptyObj(out ho_Region1);
        HOperatorSet.GenEmptyObj(out ho_Region2);
        HOperatorSet.GenEmptyObj(out ho_Rectangle3);
        HOperatorSet.GenEmptyObj(out ho_ContoursAffinTrans1);
        HOperatorSet.GenEmptyObj(out ho_Cross9);
        HOperatorSet.GenEmptyObj(out ho_Line1mh);
        HOperatorSet.GenEmptyObj(out ho_Line2mh);
        HOperatorSet.GenEmptyObj(out ho_RegionAffineTrans);
        HOperatorSet.GenEmptyObj(out ho_Line1y);
        HOperatorSet.GenEmptyObj(out ho_Line2y);
        HOperatorSet.GenEmptyObj(out ho_Line2P);
        HOperatorSet.GenEmptyObj(out ho_Line1J);

        HOperatorSet.SetDraw(hv_WindowHandle, "margin");

        list_image_files(@"C:/Users/Eros/Desktop/金属检测/轩田/", "default", new HTuple(), out hv_SearchImageFiles);
        ho_Image.Dispose();
        if (hv_SearchImageFiles.Length == 0)
        {
            disp_message(hv_WindowHandle, @"C:/Users/Eros/Desktop/金属检测/轩田/" + "未找到图片", "Window", 10, 10, "red", "fales");
            return;
        }
        if (number > hv_SearchImageFiles.Length)
        {
            number = 0;
        }
        HOperatorSet.ReadImage(out ho_Image, hv_SearchImageFiles.TupleSelect(number));
        ho_ImageMedian.Dispose();
        HOperatorSet.MedianImage(ho_Image, out ho_ImageMedian, "circle", 3.1, 200);
        ho_Image1.Dispose();
        HOperatorSet.Emphasize(ho_ImageMedian, out ho_Image1, 60, 60, 2);
        ho_Image2.Dispose();
        HOperatorSet.MedianImage(ho_Image1, out ho_Image2, "circle", 3.1, 200);
        hv_EdgeWidth = 25;
        hv_maxArr1 = new HTuple();
        hv_maxArr2 = new HTuple();
        hv_minArr1 = new HTuple();
        hv_minArr2 = new HTuple();
        hv_meanArr1 = new HTuple();
        hv_meanArr2 = new HTuple();
        HOperatorSet.HomMat2dIdentity(out hv_HomMat2DIdentity);
        hv_Distance1 = new HTuple();
        hv_Distance2 = new HTuple();
        ho_Image.Dispose();
        HOperatorSet.ReadImage(out ho_Image, hv_SearchImageFiles.TupleSelect(number));
        ho_ImageMedian.Dispose();
        HOperatorSet.MedianImage(ho_Image, out ho_ImageMedian, "circle", 3.1, "mirrored");
        ho_Image1.Dispose();
        HOperatorSet.Emphasize(ho_ImageMedian, out ho_Image1, 60, 60, 2);
        ho_Image2.Dispose();
        HOperatorSet.MedianImage(ho_Image1, out ho_Image2, "circle", 3.1, "mirrored");
        HOperatorSet.FindShapeModel(ho_Image2, hv_ModelID, (new HTuple(-180)).TupleRad()
            , (new HTuple(360)).TupleRad(), 0.5, 1, 0.5, "interpolation", 0, 0.9, out hv_Row3,
            out hv_Column3, out hv_Angle2, out hv_Score);
        if ((int)(new HTuple(hv_Row3.TupleLength())) != 0)
        {
            HOperatorSet.VectorAngleToRigid(0, 0, 0, hv_Row3, hv_Column3, hv_Angle2,
                out hv_HomMat2D2);
            ho_ContoursAffinTrans1.Dispose();
            HOperatorSet.AffineTransContourXld(ho_ModelContours, out ho_ContoursAffinTrans1,
                hv_HomMat2D2);
            ho_Cross9.Dispose();
            HOperatorSet.GenCrossContourXld(out ho_Cross9, hv_Row3, hv_Column3, 16, hv_Angle2);
            HOperatorSet.VectorAngleToRigid(hv_RowHM, hv_ColumnHM, hv_AngleHM, hv_Row3,
                hv_Column3, hv_Angle2, out hv_HomMat2D1);
            ho_Line1mh.Dispose();
            HOperatorSet.AffineTransContourXld(ho_Line1, out ho_Line1mh, hv_HomMat2D1);
            ho_Line2mh.Dispose();
            HOperatorSet.AffineTransContourXld(ho_Line2, out ho_Line2mh, hv_HomMat2D1);
            ho_RegionAffineTrans.Dispose();
            HOperatorSet.AffineTransRegion(ho_Region1, out ho_RegionAffineTrans, hv_HomMat2D1,
                "nearest_neighbor");
            //*****测量第一条短边界中心
            HOperatorSet.GetContourXld(ho_Line1mh, out hv_Row4, out hv_Col);
            ho_Regions3.Dispose();
            rake(ho_Image2, out ho_Regions3, 40, 60, 15, 1, 20, "all", "all", hv_Row4.TupleSelect(
                0), hv_Col.TupleSelect(0), hv_Row4.TupleSelect(1), hv_Col.TupleSelect(
                1), out hv_ResultRow4, out hv_ResultColumn4);
            ho_Line1y.Dispose();
            pts_to_best_line(out ho_Line1y, hv_ResultRow4, hv_ResultColumn4, 20, out hv_Row1110,
                out hv_Col1110, out hv_Row211, out hv_Col211);
            HOperatorSet.LinePosition(hv_Row1110, hv_Col1110, hv_Row211, hv_Col211, out hv_RowCenter1,
                out hv_ColCenter1, out hv_Length1, out hv_Phi1);
            ho_Cross1.Dispose();
            HOperatorSet.GenCrossContourXld(out ho_Cross1, hv_RowCenter1, hv_ColCenter1,
                45, hv_Phi1);
            //*****测量第2条边界中心
            HOperatorSet.GetContourXld(ho_Line2, out hv_Row2, out hv_Col2);
            ho_Regions3.Dispose();
            rake(ho_Image2, out ho_Regions3, 40, 60, 15, 1, 20, "all", "all", hv_Row2.TupleSelect(
                0), hv_Col2.TupleSelect(0), hv_Row2.TupleSelect(1), hv_Col2.TupleSelect(
                1), out hv_ResultRow4, out hv_ResultColumn4);
            ho_Line2y.Dispose();
            pts_to_best_line(out ho_Line2y, hv_ResultRow4, hv_ResultColumn4, 20, out hv_Row14,
                out hv_Col11, out hv_Row24, out hv_Col21);
            HOperatorSet.LinePosition(hv_Row14, hv_Col11, hv_Row24, hv_Col21, out hv_RowCenter2,
                out hv_ColCenter2, out hv_Length2, out hv_Phi2);
            ho_Cross2.Dispose();
            HOperatorSet.GenCrossContourXld(out ho_Cross2, hv_RowCenter2, hv_ColCenter2,
                15, hv_Phi2);
            HOperatorSet.HomMat2dTranslate(hv_HomMat2DIdentity, hv_Length1, 0, out hv_HomMat2DTranslate);
            HOperatorSet.HomMat2dRotate(hv_HomMat2DTranslate, ((new HTuple(180)).TupleRad()
                ) + hv_Phi2, hv_RowCenter2, hv_ColCenter2, out hv_HomMat2DRotate);
            HOperatorSet.AffineTransPoint2d(hv_HomMat2DRotate, hv_RowCenter2, hv_ColCenter2,
                out hv_Qx, out hv_Qy);
            ho_Cross2.Dispose();
            HOperatorSet.GenCrossContourXld(out ho_Cross2, hv_Qx, hv_Qy, 35, hv_Phi2);
            ho_Line2P.Dispose();
            pts_to_best_line(out ho_Line2P, hv_Qx.TupleConcat(hv_RowCenter2), hv_Qy.TupleConcat(
                hv_ColCenter2), 2, out hv_Row14, out hv_Col11, out hv_Row24, out hv_Col21);
            //*计算第二条中心线到第一线中心点的垂足
            HOperatorSet.ProjectionPl(hv_RowCenter1, hv_ColCenter1, hv_Qx, hv_Qy, hv_RowCenter2,
                hv_ColCenter2, out hv_RowProj1, out hv_ColProj1);
            ho_Cross2.Dispose();
            HOperatorSet.GenCrossContourXld(out ho_Cross2, hv_RowProj1, hv_ColProj1,
                65, hv_Phi2);
            ho_Line1J.Dispose();
            pts_to_best_line(out ho_Line1J, hv_RowProj1.TupleConcat(hv_RowCenter1), hv_ColProj1.TupleConcat(
                hv_ColCenter1), 2, out hv_Row14, out hv_Col11, out hv_Row24, out hv_Col21);

            HOperatorSet.DispObj(ho_Image2, hv_WindowHandle);

            HOperatorSet.DispObj(ho_Cross2, hv_WindowHandle);

            //**   测量短波浪
            HOperatorSet.AffineTransPoint2d(hv_HomMat2D1, hv_Tuple1.TupleSelect(4), hv_Tuple1.TupleSelect(
                5), out hv_Qx1S, out hv_Qy1S);
            HOperatorSet.AffineTransPoint2d(hv_HomMat2D1, hv_Tuple1.TupleSelect(6), hv_Tuple1.TupleSelect(
                7), out hv_Qx1E, out hv_Qy1E);
            ho_XLD.Dispose();
            waves(ho_Image2, out ho_XLD, hv_Tuple1.TupleSelect(0), hv_Tuple1.TupleSelect(
                1), hv_Tuple1.TupleSelect(2), hv_Tuple1.TupleSelect(3), hv_Qx1S, hv_Qy1S,
                hv_Qx1E, hv_Qy1E, hv_Tuple1.TupleSelect(8), out hv_PeaksRow2, out hv_PeaksCol2,
                out hv_pitsRow2, out hv_pitsCol2, out hv_pointsRow, out hv_pointsCol);
            ho_Cross7.Dispose();
            HOperatorSet.GenCrossContourXld(out ho_Cross7, hv_pointsRow, hv_pointsCol,
                6, 0);
            HOperatorSet.DistancePp(hv_pointsRow, hv_pointsCol, HTuple.TupleGenConst(
                new HTuple(hv_pointsRow.TupleLength()), hv_RowProj1), HTuple.TupleGenConst(
                new HTuple(hv_pointsRow.TupleLength()), hv_ColProj1), out hv_Distance1);
            //**   测量长波浪
            HOperatorSet.AffineTransPoint2d(hv_HomMat2D1, hv_Tuple2.TupleSelect(4), hv_Tuple2.TupleSelect(
                5), out hv_Qx2S, out hv_Qy2S);
            HOperatorSet.AffineTransPoint2d(hv_HomMat2D1, hv_Tuple2.TupleSelect(6), hv_Tuple2.TupleSelect(
                7), out hv_Qx2E, out hv_Qy2E);
            ho_XLD1.Dispose();
            waves(ho_Image2, out ho_XLD1, hv_Tuple2.TupleSelect(0), hv_Tuple2.TupleSelect(
                1), hv_Tuple2.TupleSelect(2), hv_Tuple2.TupleSelect(3), hv_Qx2S, hv_Qy2S,
                hv_Qx2E, hv_Qy2E, hv_Tuple2.TupleSelect(8), out hv_PeaksRow3, out hv_PeaksCol3,
                out hv_pitsRow3, out hv_pitsCol3, out hv_pointsRow1, out hv_pointsCol1);
            ho_Cross7.Dispose();
            HOperatorSet.GenCrossContourXld(out ho_Cross7, hv_pointsRow1, hv_pointsCol1,
                6, 0);
            HOperatorSet.DistancePp(hv_pointsRow1, hv_pointsCol1, HTuple.TupleGenConst(
                new HTuple(hv_pointsRow1.TupleLength()), hv_RowProj1), HTuple.TupleGenConst(
                new HTuple(hv_pointsRow1.TupleLength()), hv_ColProj1), out hv_Distance2);
        }
        number++;
        ho_Image.Dispose();
        ho_ImageMedian.Dispose();
        ho_Image1.Dispose();
        ho_Image2.Dispose();
        ho_Rectangle2.Dispose();
        ho_ImageReduced.Dispose();
        ho_Cross6.Dispose();
        ho_ModelContours.Dispose();
        ho_ContoursAffinTrans.Dispose();
        ho_Regions.Dispose();
        ho_Line1.Dispose();
        ho_Regions3.Dispose();
        ho_Cross8.Dispose();
        ho_Cross1.Dispose();
        ho_Line2.Dispose();
        ho_Cross2.Dispose();
        ho_XLD.Dispose();
        ho_Cross7.Dispose();
        ho_XLD1.Dispose();
        ho_Region1.Dispose();
        ho_Region2.Dispose();
        ho_Rectangle3.Dispose();
        ho_ContoursAffinTrans1.Dispose();
        ho_Cross9.Dispose();
        ho_Line1mh.Dispose();
        ho_Line2mh.Dispose();
        ho_RegionAffineTrans.Dispose();
        ho_Line1y.Dispose();
        ho_Line2y.Dispose();
        ho_Line2P.Dispose();
        ho_Line1J.Dispose();
    }

#endif
}