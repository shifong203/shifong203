//
// File generated by HDevelop for HALCON/.NET (C#) Version 17.12
//

using HalconDotNet;

public partial class HDevelopExport
{
    // Chapter: XLD / Creation
    // Short Description: Creates an arrow shaped XLD contour.
    public void gen_arrow_contour_xld(out HObject ho_Arrow, HTuple hv_Row1, HTuple hv_Column1,
        HTuple hv_Row2, HTuple hv_Column2, HTuple hv_HeadLength, HTuple hv_HeadWidth)
    {
        // Stack for temporary objects
        HObject[] OTemp = new HObject[20];

        // Local iconic variables

        HObject ho_TempArrow = null;

        // Local control variables

        HTuple hv_Length = null, hv_ZeroLengthIndices = null;
        HTuple hv_DR = null, hv_DC = null, hv_HalfHeadWidth = null;
        HTuple hv_RowP1 = null, hv_ColP1 = null, hv_RowP2 = null;
        HTuple hv_ColP2 = null, hv_Index = null;
        // Initialize local and output iconic variables
        HOperatorSet.GenEmptyObj(out ho_Arrow);
        HOperatorSet.GenEmptyObj(out ho_TempArrow);
        //This procedure generates arrow shaped XLD contours,
        //pointing from (Row1, Column1) to (Row2, Column2).
        //If starting and end point are identical, a contour consisting
        //of a single point is returned.
        //
        //input parameteres:
        //Row1, Column1: Coordinates of the arrows' starting points
        //Row2, Column2: Coordinates of the arrows' end points
        //HeadLength, HeadWidth: Size of the arrow heads in pixels
        //
        //output parameter:
        //Arrow: The resulting XLD contour
        //
        //The input tuples Row1, Column1, Row2, and Column2 have to be of
        //the same length.
        //HeadLength and HeadWidth either have to be of the same length as
        //Row1, Column1, Row2, and Column2 or have to be a single element.
        //If one of the above restrictions is violated, an error will occur.
        //
        //
        //Init
        ho_Arrow.Dispose();
        HOperatorSet.GenEmptyObj(out ho_Arrow);
        //
        //Calculate the arrow length
        HOperatorSet.DistancePp(hv_Row1, hv_Column1, hv_Row2, hv_Column2, out hv_Length);
        //
        //Mark arrows with identical start and end point
        //(set Length to -1 to avoid division-by-zero exception)
        hv_ZeroLengthIndices = hv_Length.TupleFind(0);
        if ((int)(new HTuple(hv_ZeroLengthIndices.TupleNotEqual(-1))) != 0)
        {
            if (hv_Length == null)
                hv_Length = new HTuple();
            hv_Length[hv_ZeroLengthIndices] = -1;
        }
        //
        //Calculate auxiliary variables.
        hv_DR = (1.0 * (hv_Row2 - hv_Row1)) / hv_Length;
        hv_DC = (1.0 * (hv_Column2 - hv_Column1)) / hv_Length;
        hv_HalfHeadWidth = hv_HeadWidth / 2.0;
        //
        //Calculate end points of the arrow head.
        hv_RowP1 = (hv_Row1 + ((hv_Length - hv_HeadLength) * hv_DR)) + (hv_HalfHeadWidth * hv_DC);
        hv_ColP1 = (hv_Column1 + ((hv_Length - hv_HeadLength) * hv_DC)) - (hv_HalfHeadWidth * hv_DR);
        hv_RowP2 = (hv_Row1 + ((hv_Length - hv_HeadLength) * hv_DR)) - (hv_HalfHeadWidth * hv_DC);
        hv_ColP2 = (hv_Column1 + ((hv_Length - hv_HeadLength) * hv_DC)) + (hv_HalfHeadWidth * hv_DR);
        //
        //Finally create output XLD contour for each input point pair
        for (hv_Index = 0; (int)hv_Index <= (int)((new HTuple(hv_Length.TupleLength())) - 1); hv_Index = (int)hv_Index + 1)
        {
            if ((int)(new HTuple(((hv_Length.TupleSelect(hv_Index))).TupleEqual(-1))) != 0)
            {
                //Create_ single points for arrows with identical start and end point
                ho_TempArrow.Dispose();
                HOperatorSet.GenContourPolygonXld(out ho_TempArrow, hv_Row1.TupleSelect(hv_Index),
                    hv_Column1.TupleSelect(hv_Index));
            }
            else
            {
                //Create arrow contour
                ho_TempArrow.Dispose();
                HOperatorSet.GenContourPolygonXld(out ho_TempArrow, ((((((((((hv_Row1.TupleSelect(
                    hv_Index))).TupleConcat(hv_Row2.TupleSelect(hv_Index)))).TupleConcat(
                    hv_RowP1.TupleSelect(hv_Index)))).TupleConcat(hv_Row2.TupleSelect(hv_Index)))).TupleConcat(
                    hv_RowP2.TupleSelect(hv_Index)))).TupleConcat(hv_Row2.TupleSelect(hv_Index)),
                    ((((((((((hv_Column1.TupleSelect(hv_Index))).TupleConcat(hv_Column2.TupleSelect(
                    hv_Index)))).TupleConcat(hv_ColP1.TupleSelect(hv_Index)))).TupleConcat(
                    hv_Column2.TupleSelect(hv_Index)))).TupleConcat(hv_ColP2.TupleSelect(
                    hv_Index)))).TupleConcat(hv_Column2.TupleSelect(hv_Index)));
            }
            {
                HObject ExpTmpOutVar_0;
                HOperatorSet.ConcatObj(ho_Arrow, ho_TempArrow, out ExpTmpOutVar_0);
                ho_Arrow.Dispose();
                ho_Arrow = ExpTmpOutVar_0;
            }
        }
        ho_TempArrow.Dispose();

        return;
    }
}