//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.42000 版自动生成。
// 
#pragma warning disable 1591

namespace Vision2.cnshah0tis01 {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="MES_TISSoap", Namespace="http://jabil.com/GMS/MES_TIS")]
    public partial class MES_TIS : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback OKToTestOperationCompleted;
        
        private System.Threading.SendOrPostCallback OKToTestLinkMaterialOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPanelSerializeResultOperationCompleted;
        
        private System.Threading.SendOrPostCallback LookupCustAssyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCurrentRouteStepOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTestDataFormatsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessTestDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessTestDataV2OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTestHistoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLastTestResultOperationCompleted;
        
        private System.Threading.SendOrPostCallback OkToTest_BreakoutOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public MES_TIS() {
            this.Url = global::Vision2.Properties.Settings.Default.Vision2_0_cnshah0tis01_MES_TIS;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetVersionCompletedEventHandler GetVersionCompleted;
        
        /// <remarks/>
        public event OKToTestCompletedEventHandler OKToTestCompleted;
        
        /// <remarks/>
        public event OKToTestLinkMaterialCompletedEventHandler OKToTestLinkMaterialCompleted;
        
        /// <remarks/>
        public event GetPanelSerializeResultCompletedEventHandler GetPanelSerializeResultCompleted;
        
        /// <remarks/>
        public event LookupCustAssyCompletedEventHandler LookupCustAssyCompleted;
        
        /// <remarks/>
        public event GetCurrentRouteStepCompletedEventHandler GetCurrentRouteStepCompleted;
        
        /// <remarks/>
        public event GetTestDataFormatsCompletedEventHandler GetTestDataFormatsCompleted;
        
        /// <remarks/>
        public event ProcessTestDataCompletedEventHandler ProcessTestDataCompleted;
        
        /// <remarks/>
        public event ProcessTestDataV2CompletedEventHandler ProcessTestDataV2Completed;
        
        /// <remarks/>
        public event GetTestHistoryCompletedEventHandler GetTestHistoryCompleted;
        
        /// <remarks/>
        public event GetLastTestResultCompletedEventHandler GetLastTestResultCompleted;
        
        /// <remarks/>
        public event OkToTest_BreakoutCompletedEventHandler OkToTest_BreakoutCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://jabil.com/GMS/MES_TIS/GetVersion", RequestNamespace="http://jabil.com/GMS/MES_TIS", ResponseNamespace="http://jabil.com/GMS/MES_TIS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetVersion() {
            object[] results = this.Invoke("GetVersion", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetVersionAsync() {
            this.GetVersionAsync(null);
        }
        
        /// <remarks/>
        public void GetVersionAsync(object userState) {
            if ((this.GetVersionOperationCompleted == null)) {
                this.GetVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVersionOperationCompleted);
            }
            this.InvokeAsync("GetVersion", new object[0], this.GetVersionOperationCompleted, userState);
        }
        
        private void OnGetVersionOperationCompleted(object arg) {
            if ((this.GetVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVersionCompleted(this, new GetVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://jabil.com/GMS/MES_TIS/OKToTest", RequestNamespace="http://jabil.com/GMS/MES_TIS", ResponseNamespace="http://jabil.com/GMS/MES_TIS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string OKToTest(string CustomerName, string Division, string SerialNumber, string AssemblyNumber, string TesterName, string ProcessStep) {
            object[] results = this.Invoke("OKToTest", new object[] {
                        CustomerName,
                        Division,
                        SerialNumber,
                        AssemblyNumber,
                        TesterName,
                        ProcessStep});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void OKToTestAsync(string CustomerName, string Division, string SerialNumber, string AssemblyNumber, string TesterName, string ProcessStep) {
            this.OKToTestAsync(CustomerName, Division, SerialNumber, AssemblyNumber, TesterName, ProcessStep, null);
        }
        
        /// <remarks/>
        public void OKToTestAsync(string CustomerName, string Division, string SerialNumber, string AssemblyNumber, string TesterName, string ProcessStep, object userState) {
            if ((this.OKToTestOperationCompleted == null)) {
                this.OKToTestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOKToTestOperationCompleted);
            }
            this.InvokeAsync("OKToTest", new object[] {
                        CustomerName,
                        Division,
                        SerialNumber,
                        AssemblyNumber,
                        TesterName,
                        ProcessStep}, this.OKToTestOperationCompleted, userState);
        }
        
        private void OnOKToTestOperationCompleted(object arg) {
            if ((this.OKToTestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OKToTestCompleted(this, new OKToTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://jabil.com/GMS/MES_TIS/OKToTestLinkMaterial", RequestNamespace="http://jabil.com/GMS/MES_TIS", ResponseNamespace="http://jabil.com/GMS/MES_TIS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string OKToTestLinkMaterial(string CustomerName, string Division, string LinkMaterialSerialNumber, string AssemblyNumber, string TesterName, string ProcessStep) {
            object[] results = this.Invoke("OKToTestLinkMaterial", new object[] {
                        CustomerName,
                        Division,
                        LinkMaterialSerialNumber,
                        AssemblyNumber,
                        TesterName,
                        ProcessStep});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void OKToTestLinkMaterialAsync(string CustomerName, string Division, string LinkMaterialSerialNumber, string AssemblyNumber, string TesterName, string ProcessStep) {
            this.OKToTestLinkMaterialAsync(CustomerName, Division, LinkMaterialSerialNumber, AssemblyNumber, TesterName, ProcessStep, null);
        }
        
        /// <remarks/>
        public void OKToTestLinkMaterialAsync(string CustomerName, string Division, string LinkMaterialSerialNumber, string AssemblyNumber, string TesterName, string ProcessStep, object userState) {
            if ((this.OKToTestLinkMaterialOperationCompleted == null)) {
                this.OKToTestLinkMaterialOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOKToTestLinkMaterialOperationCompleted);
            }
            this.InvokeAsync("OKToTestLinkMaterial", new object[] {
                        CustomerName,
                        Division,
                        LinkMaterialSerialNumber,
                        AssemblyNumber,
                        TesterName,
                        ProcessStep}, this.OKToTestLinkMaterialOperationCompleted, userState);
        }
        
        private void OnOKToTestLinkMaterialOperationCompleted(object arg) {
            if ((this.OKToTestLinkMaterialCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OKToTestLinkMaterialCompleted(this, new OKToTestLinkMaterialCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://jabil.com/GMS/MES_TIS/GetPanelSerializeResult", RequestNamespace="http://jabil.com/GMS/MES_TIS", ResponseNamespace="http://jabil.com/GMS/MES_TIS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPanelSerializeResult(string CustomerName, string Division, string PanelSerialNumber) {
            object[] results = this.Invoke("GetPanelSerializeResult", new object[] {
                        CustomerName,
                        Division,
                        PanelSerialNumber});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPanelSerializeResultAsync(string CustomerName, string Division, string PanelSerialNumber) {
            this.GetPanelSerializeResultAsync(CustomerName, Division, PanelSerialNumber, null);
        }
        
        /// <remarks/>
        public void GetPanelSerializeResultAsync(string CustomerName, string Division, string PanelSerialNumber, object userState) {
            if ((this.GetPanelSerializeResultOperationCompleted == null)) {
                this.GetPanelSerializeResultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPanelSerializeResultOperationCompleted);
            }
            this.InvokeAsync("GetPanelSerializeResult", new object[] {
                        CustomerName,
                        Division,
                        PanelSerialNumber}, this.GetPanelSerializeResultOperationCompleted, userState);
        }
        
        private void OnGetPanelSerializeResultOperationCompleted(object arg) {
            if ((this.GetPanelSerializeResultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPanelSerializeResultCompleted(this, new GetPanelSerializeResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://jabil.com/GMS/MES_TIS/LookupCustAssy", RequestNamespace="http://jabil.com/GMS/MES_TIS", ResponseNamespace="http://jabil.com/GMS/MES_TIS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LookupCustAssy(string SerialNumber, string CustomerName, string Division) {
            object[] results = this.Invoke("LookupCustAssy", new object[] {
                        SerialNumber,
                        CustomerName,
                        Division});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LookupCustAssyAsync(string SerialNumber, string CustomerName, string Division) {
            this.LookupCustAssyAsync(SerialNumber, CustomerName, Division, null);
        }
        
        /// <remarks/>
        public void LookupCustAssyAsync(string SerialNumber, string CustomerName, string Division, object userState) {
            if ((this.LookupCustAssyOperationCompleted == null)) {
                this.LookupCustAssyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLookupCustAssyOperationCompleted);
            }
            this.InvokeAsync("LookupCustAssy", new object[] {
                        SerialNumber,
                        CustomerName,
                        Division}, this.LookupCustAssyOperationCompleted, userState);
        }
        
        private void OnLookupCustAssyOperationCompleted(object arg) {
            if ((this.LookupCustAssyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LookupCustAssyCompleted(this, new LookupCustAssyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://jabil.com/GMS/MES_TIS/GetCurrentRouteStep", RequestNamespace="http://jabil.com/GMS/MES_TIS", ResponseNamespace="http://jabil.com/GMS/MES_TIS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCurrentRouteStep(string SerialNumber) {
            object[] results = this.Invoke("GetCurrentRouteStep", new object[] {
                        SerialNumber});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCurrentRouteStepAsync(string SerialNumber) {
            this.GetCurrentRouteStepAsync(SerialNumber, null);
        }
        
        /// <remarks/>
        public void GetCurrentRouteStepAsync(string SerialNumber, object userState) {
            if ((this.GetCurrentRouteStepOperationCompleted == null)) {
                this.GetCurrentRouteStepOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCurrentRouteStepOperationCompleted);
            }
            this.InvokeAsync("GetCurrentRouteStep", new object[] {
                        SerialNumber}, this.GetCurrentRouteStepOperationCompleted, userState);
        }
        
        private void OnGetCurrentRouteStepOperationCompleted(object arg) {
            if ((this.GetCurrentRouteStepCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCurrentRouteStepCompleted(this, new GetCurrentRouteStepCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://jabil.com/GMS/MES_TIS/GetTestDataFormats", RequestNamespace="http://jabil.com/GMS/MES_TIS", ResponseNamespace="http://jabil.com/GMS/MES_TIS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTestDataFormats() {
            object[] results = this.Invoke("GetTestDataFormats", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTestDataFormatsAsync() {
            this.GetTestDataFormatsAsync(null);
        }
        
        /// <remarks/>
        public void GetTestDataFormatsAsync(object userState) {
            if ((this.GetTestDataFormatsOperationCompleted == null)) {
                this.GetTestDataFormatsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTestDataFormatsOperationCompleted);
            }
            this.InvokeAsync("GetTestDataFormats", new object[0], this.GetTestDataFormatsOperationCompleted, userState);
        }
        
        private void OnGetTestDataFormatsOperationCompleted(object arg) {
            if ((this.GetTestDataFormatsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTestDataFormatsCompleted(this, new GetTestDataFormatsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://jabil.com/GMS/MES_TIS/ProcessTestData", RequestNamespace="http://jabil.com/GMS/MES_TIS", ResponseNamespace="http://jabil.com/GMS/MES_TIS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProcessTestData(string TestData, string DataFormat) {
            object[] results = this.Invoke("ProcessTestData", new object[] {
                        TestData,
                        DataFormat});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessTestDataAsync(string TestData, string DataFormat) {
            this.ProcessTestDataAsync(TestData, DataFormat, null);
        }
        
        /// <remarks/>
        public void ProcessTestDataAsync(string TestData, string DataFormat, object userState) {
            if ((this.ProcessTestDataOperationCompleted == null)) {
                this.ProcessTestDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessTestDataOperationCompleted);
            }
            this.InvokeAsync("ProcessTestData", new object[] {
                        TestData,
                        DataFormat}, this.ProcessTestDataOperationCompleted, userState);
        }
        
        private void OnProcessTestDataOperationCompleted(object arg) {
            if ((this.ProcessTestDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessTestDataCompleted(this, new ProcessTestDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://jabil.com/GMS/MES_TIS/ProcessTestDataV2", RequestNamespace="http://jabil.com/GMS/MES_TIS", ResponseNamespace="http://jabil.com/GMS/MES_TIS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProcessTestDataV2(string TestData, string DataFormat, bool StoreMeasurementsOffsite, bool JemsDatabase, string SqlServer, string Database) {
            object[] results = this.Invoke("ProcessTestDataV2", new object[] {
                        TestData,
                        DataFormat,
                        StoreMeasurementsOffsite,
                        JemsDatabase,
                        SqlServer,
                        Database});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessTestDataV2Async(string TestData, string DataFormat, bool StoreMeasurementsOffsite, bool JemsDatabase, string SqlServer, string Database) {
            this.ProcessTestDataV2Async(TestData, DataFormat, StoreMeasurementsOffsite, JemsDatabase, SqlServer, Database, null);
        }
        
        /// <remarks/>
        public void ProcessTestDataV2Async(string TestData, string DataFormat, bool StoreMeasurementsOffsite, bool JemsDatabase, string SqlServer, string Database, object userState) {
            if ((this.ProcessTestDataV2OperationCompleted == null)) {
                this.ProcessTestDataV2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessTestDataV2OperationCompleted);
            }
            this.InvokeAsync("ProcessTestDataV2", new object[] {
                        TestData,
                        DataFormat,
                        StoreMeasurementsOffsite,
                        JemsDatabase,
                        SqlServer,
                        Database}, this.ProcessTestDataV2OperationCompleted, userState);
        }
        
        private void OnProcessTestDataV2OperationCompleted(object arg) {
            if ((this.ProcessTestDataV2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessTestDataV2Completed(this, new ProcessTestDataV2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://jabil.com/GMS/MES_TIS/GetTestHistory", RequestNamespace="http://jabil.com/GMS/MES_TIS", ResponseNamespace="http://jabil.com/GMS/MES_TIS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTestHistory(string SerialNumber, string CustomerName, string Division) {
            object[] results = this.Invoke("GetTestHistory", new object[] {
                        SerialNumber,
                        CustomerName,
                        Division});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTestHistoryAsync(string SerialNumber, string CustomerName, string Division) {
            this.GetTestHistoryAsync(SerialNumber, CustomerName, Division, null);
        }
        
        /// <remarks/>
        public void GetTestHistoryAsync(string SerialNumber, string CustomerName, string Division, object userState) {
            if ((this.GetTestHistoryOperationCompleted == null)) {
                this.GetTestHistoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTestHistoryOperationCompleted);
            }
            this.InvokeAsync("GetTestHistory", new object[] {
                        SerialNumber,
                        CustomerName,
                        Division}, this.GetTestHistoryOperationCompleted, userState);
        }
        
        private void OnGetTestHistoryOperationCompleted(object arg) {
            if ((this.GetTestHistoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTestHistoryCompleted(this, new GetTestHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://jabil.com/GMS/MES_TIS/GetLastTestResult", RequestNamespace="http://jabil.com/GMS/MES_TIS", ResponseNamespace="http://jabil.com/GMS/MES_TIS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLastTestResult(string SerialNumber, string CustomerName, string Division, string ProcessStep) {
            object[] results = this.Invoke("GetLastTestResult", new object[] {
                        SerialNumber,
                        CustomerName,
                        Division,
                        ProcessStep});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLastTestResultAsync(string SerialNumber, string CustomerName, string Division, string ProcessStep) {
            this.GetLastTestResultAsync(SerialNumber, CustomerName, Division, ProcessStep, null);
        }
        
        /// <remarks/>
        public void GetLastTestResultAsync(string SerialNumber, string CustomerName, string Division, string ProcessStep, object userState) {
            if ((this.GetLastTestResultOperationCompleted == null)) {
                this.GetLastTestResultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLastTestResultOperationCompleted);
            }
            this.InvokeAsync("GetLastTestResult", new object[] {
                        SerialNumber,
                        CustomerName,
                        Division,
                        ProcessStep}, this.GetLastTestResultOperationCompleted, userState);
        }
        
        private void OnGetLastTestResultOperationCompleted(object arg) {
            if ((this.GetLastTestResultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLastTestResultCompleted(this, new GetLastTestResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://jabil.com/GMS/MES_TIS/OkToTest_Breakout", RequestNamespace="http://jabil.com/GMS/MES_TIS", ResponseNamespace="http://jabil.com/GMS/MES_TIS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string OkToTest_Breakout(string CustomerName, string Division, string SerialNumber, string AssemblyNumber, string TesterName, string ProcessStep, string BreakOutFullPanel) {
            object[] results = this.Invoke("OkToTest_Breakout", new object[] {
                        CustomerName,
                        Division,
                        SerialNumber,
                        AssemblyNumber,
                        TesterName,
                        ProcessStep,
                        BreakOutFullPanel});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void OkToTest_BreakoutAsync(string CustomerName, string Division, string SerialNumber, string AssemblyNumber, string TesterName, string ProcessStep, string BreakOutFullPanel) {
            this.OkToTest_BreakoutAsync(CustomerName, Division, SerialNumber, AssemblyNumber, TesterName, ProcessStep, BreakOutFullPanel, null);
        }
        
        /// <remarks/>
        public void OkToTest_BreakoutAsync(string CustomerName, string Division, string SerialNumber, string AssemblyNumber, string TesterName, string ProcessStep, string BreakOutFullPanel, object userState) {
            if ((this.OkToTest_BreakoutOperationCompleted == null)) {
                this.OkToTest_BreakoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOkToTest_BreakoutOperationCompleted);
            }
            this.InvokeAsync("OkToTest_Breakout", new object[] {
                        CustomerName,
                        Division,
                        SerialNumber,
                        AssemblyNumber,
                        TesterName,
                        ProcessStep,
                        BreakOutFullPanel}, this.OkToTest_BreakoutOperationCompleted, userState);
        }
        
        private void OnOkToTest_BreakoutOperationCompleted(object arg) {
            if ((this.OkToTest_BreakoutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OkToTest_BreakoutCompleted(this, new OkToTest_BreakoutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetVersionCompletedEventHandler(object sender, GetVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void OKToTestCompletedEventHandler(object sender, OKToTestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OKToTestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OKToTestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void OKToTestLinkMaterialCompletedEventHandler(object sender, OKToTestLinkMaterialCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OKToTestLinkMaterialCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OKToTestLinkMaterialCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetPanelSerializeResultCompletedEventHandler(object sender, GetPanelSerializeResultCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPanelSerializeResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPanelSerializeResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void LookupCustAssyCompletedEventHandler(object sender, LookupCustAssyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LookupCustAssyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LookupCustAssyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetCurrentRouteStepCompletedEventHandler(object sender, GetCurrentRouteStepCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCurrentRouteStepCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCurrentRouteStepCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetTestDataFormatsCompletedEventHandler(object sender, GetTestDataFormatsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTestDataFormatsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTestDataFormatsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ProcessTestDataCompletedEventHandler(object sender, ProcessTestDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessTestDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessTestDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ProcessTestDataV2CompletedEventHandler(object sender, ProcessTestDataV2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessTestDataV2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessTestDataV2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetTestHistoryCompletedEventHandler(object sender, GetTestHistoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTestHistoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTestHistoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetLastTestResultCompletedEventHandler(object sender, GetLastTestResultCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLastTestResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLastTestResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void OkToTest_BreakoutCompletedEventHandler(object sender, OkToTest_BreakoutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OkToTest_BreakoutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OkToTest_BreakoutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591